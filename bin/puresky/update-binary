#!/sbin/sh

OUTFD=/proc/self/fd/$2
ZIPFILE="$3"

ui_print() {
  echo -e "ui_print $1\nui_print" >>$OUTFD
}

package_extract_file() {
  ui_print "- 正在刷写分区 $(echo $2 | cut -d '/' -f 6) "
  unzip -p "$ZIPFILE" $1 >$2
}

package_extract_zstd() {
  ui_print "- 正在刷写分区 $(echo $2 | cut -d '/' -f 6) "
  unzip -p "$ZIPFILE" $1 | /tmp/bin/android/zstd -c -d >$2
}

getVolumeKey() {
	ui_print "- 监听音量键 按[+]选择"是" 按[-]选择"否""
	keyInfo=true
	while $keyInfo;do
		keyInfo=$(getevent -qlc 1 |grep KEY_VOLUME)
		if [ "$keyInfo" == "" ];then
			continue
		else
			isUpKey=$(echo $keyInfo |grep KEY_VOLUMEUP)
			[ "$isUpKey" != "" ] && return 0 || return 1
			break
		fi
	done
}

checkDevice() {
	myDevice=$(getprop ro.product.name)
	romDevice=deviceCode
	ui_print "========================="
	ui_print " "
	ui_print "       设备代号：$myDevice"
	ui_print " "
	ui_print "       ROM 代号：$romDevice"
	ui_print " "
	ui_print "========================="
	if [ "$myDevice" != "$romDevice" ];then
		ui_print "- 设备代号检验不通过，请再次核实此包是否对应你的机型"
		ui_print "- 是否继续刷入？"
		if ! getVolumeKey ;then
			exit
		fi
	fi
}

[ -d /tmp ] && rm -rf /tmp
mkdir -p /tmp
unzip "$ZIPFILE" bin/android/zstd -d /tmp
chmod -R 0755 /tmp
ui_print " "
ui_print "========================="
ui_print "       欢迎刷入 PureSky 官改"
ui_print " PureSky 官网 https://jk.511i.cn"
ui_print "========================="
ui_print " "

checkDevice

# 检测MD5，检测不到 PureSky 关键字就跳过

romName=$(basename $ZIPFILE)
isPureSkyROM=$(echo $romName |grep PureSky)
isPureSkyDIY=$(echo $romName |grep -E "PureSkyDIY_|PureSkyDiy_")
if [ "$isPureSkyROM" != "" ];then
	ui_print "- 正在检验MD5片段"
	myHash=$(md5sum $ZIPFILE |head -c 10)
	if [ "$isPureSkyDIY" != "" ];then
		realHash=$(echo $romName |cut -d '_' -f 6)
		ui_print "- 正确的MD5片段应为:$realHash"
	else
		realHash=$(echo $romName |cut -d '_' -f 5)
		ui_print "- 正确的MD5片段应为:$realHash"
	fi
	ui_print "- 本地ROM的MD5为:$myHash"
	if [ "$myHash" != "$realHash" ];then
		ui_print "- MD5片段检验不通过，终止刷机"
		ui_print " "
		ui_print "- 请重新下载ROM并验证MD5正确后再刷"
		exit 250
	fi
else
	ui_print "- 跳过MD5检验"
fi




# 禁用模块
ui_print "- 是否禁用模块？"
if getVolumeKey;then
	ui_print "- 禁用模块"
	for module in $(ls -d /data/adb/modules/*); do
		moduleName=$(basename $module)
		ui_print "- 正在禁用 $moduleName"
		touch $module/disable
	done
fi

ui_print "- 开始刷机"


#firmware


# unzip boot
unzip -o $ZIPFILE "images/boot*.img" -d /tmp >/dev/null 2>&1
unzip -o $ZIPFILE "images/init_boot*.img" -d /tmp >/dev/null 2>&1
unzip -o $ZIPFILE "images/recovery*.img" -d /tmp >/dev/null 2>&1
if [ -f tmp/images/boot_official.img ];then
	package_extract_file "images/boot_official.img" "/dev/block/bootdevice/by-name/boot_a"
	package_extract_file "images/boot_official.img" "/dev/block/bootdevice/by-name/boot_b"
fi

if [ -f tmp/images/init_boot_magisk.img ];then
	ui_print "- 是否需要 root？"
	if getVolumeKey ;then
		ui_print "- 正在刷入 root"
		package_extract_file "images/init_boot_magisk.img" "/dev/block/bootdevice/by-name/init_boot_a"
		package_extract_file "images/init_boot_magisk.img" "/dev/block/bootdevice/by-name/init_boot_b"
	else
		if [ -f tmp/images/init_boot_official.img ];then
			package_extract_file "images/init_boot_official.img" "/dev/block/bootdevice/by-name/init_boot_a"
			package_extract_file "images/init_boot_official.img" "/dev/block/bootdevice/by-name/init_boot_b"
		fi
	fi
	package_extract_file "images/boot_official.img" "/dev/block/bootdevice/by-name/boot_a"
	package_extract_file "images/boot_official.img" "/dev/block/bootdevice/by-name/boot_b"
else
	if [ -f tmp/images/boot_magisk.img ];then
		ui_print "- 是否需要 root？"
		if getVolumeKey ;then
			ui_print "- 正在刷入 root"
			package_extract_file "images/boot_magisk.img" "/dev/block/bootdevice/by-name/boot_a"
			package_extract_file "images/boot_magisk.img" "/dev/block/bootdevice/by-name/boot_b"
		else
			if [ -f tmp/images/boot_official.img ];then
				package_extract_file "images/boot_official.img" "/dev/block/bootdevice/by-name/boot_a"
				package_extract_file "images/boot_official.img" "/dev/block/bootdevice/by-name/boot_b"
			fi
		fi
	fi
fi

if [ -f tmp/images/boot_twrp.img ];then
	ui_print "- 是否需要 TWRP？"
	if getVolumeKey ;then
		ui_print "- 正在刷入 TWRP"
		package_extract_file "images/boot_twrp.img" "/dev/block/bootdevice/by-name/boot_a"
		package_extract_file "images/boot_twrp.img" "/dev/block/bootdevice/by-name/boot_b"
	fi
fi

if [ -f tmp/images/recovery_twrp.img ];then
	ui_print "- 是否需要 TWRP？"
	if getVolumeKey ;then
		ui_print "- 正在刷入 TWRP"
		package_extract_file "images/recovery_twrp.img" "/dev/block/bootdevice/by-name/recovery_a"
		package_extract_file "images/recovery_twrp.img" "/dev/block/bootdevice/by-name/recovery_b"
	fi
fi



# unzip preloader
unzip -o $ZIPFILE "images/preloader*.img" -d /tmp >/dev/null 2>&1

# 部分机型 刷 preloader 时 检测部分机型的闪存类型 UFS or EMMC

# UFS
if [ -e /dev/block/sda ] && [ -f tmp/images/preloader_ufs.img ] ;then
	unzip -p $ZIPFILE images/preloader_ufs.img | /tmp/bin/android/zstd -c -d >/dev/block/by-name/sda
fi

#EMMC
if [ -e /dev/block/mmcblk0boot0 ] && [ -f tmp/images/preloader_emmc.img ] ;then
	unzip -p $ZIPFILE images/preloader_emmc.img | /tmp/bin/android/zstd -c -d >/dev/block/by-name/mmcblk0boot0
fi

if [ -e /dev/block/mmcblk0boot1 ] && [ -f tmp/images/preloader_emmc.img ] ;then
	unzip -p $ZIPFILE images/preloader_emmc.img | /tmp/bin/android/zstd -c -d >/dev/block/by-name/mmcblk0boot1
fi

# 有 preloader_raw.img 时 获取分区名称
if [ -f tmp/images/preloader_raw.img ] ;then
	for preloaderPartition in $(ls /dev/block/by-name |grep preloader);do
		unzip -p $ZIPFILE images/preloader_raw.img | /tmp/bin/android/zstd -c -d >/dev/block/by-name/"$preloaderPartition"
	done
fi




#super cust image
package_extract_file "images/cust.img" "/dev/block/bootdevice/by-name/cust"
package_extract_zstd "images/super.img.zst" "/dev/block/bootdevice/by-name/super"


#remap
[ -e /dev/block/mapper/odm_a ] && lptools unmap odm_a && lptools map odm_a
[ -e /dev/block/mapper/mi_ext_a ] && lptools unmap mi_ext_a && lptools map mi_ext_a
[ -e /dev/block/mapper/system_a ] && lptools unmap system_a && lptools map system_a
[ -e /dev/block/mapper/vendor_a ] && lptools unmap vendor_a && lptools map vendor_a
[ -e /dev/block/mapper/product_a ] && lptools unmap product_a && lptools map product_a
[ -e /dev/block/mapper/odm_dlkm_a ] && lptools unmap odm_dlkm_a && lptools map odm_dlkm_a
[ -e /dev/block/mapper/system_ext_a ] && lptools unmap system_ext_a && lptools map system_ext_a
[ -e /dev/block/mapper/vendor_dlkm_a ] && lptools unmap vendor_dlkm_a && lptools map vendor_dlkm_a
[ -e /dev/block/mapper/system_dlkm_a ] && lptools unmap system_dlkm_a && lptools map system_dlkm_a


ui_print "- 清除缓存"
rm -rf /data/dalvik-cache/arm/*
rm -rf /data/dalvik-cache/arm64/*
rm -rf /data/system/package_cache/*
ui_print " "
ui_print " "
ui_print "- 刷机完毕"
ui_print " "
ui_print " "
ui_print "- 如有红色挂载报错请直接忽略"
ui_print "- 如有红色挂载报错请直接忽略"
ui_print "- 如有红色挂载报错请直接忽略"
ui_print " "
ui_print " "
exit 0
